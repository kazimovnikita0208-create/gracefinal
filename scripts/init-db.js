const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function initDatabase() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const masterCount = await prisma.master.count();
    
    if (masterCount > 0) {
      console.log('‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
      return;
    }
    
    console.log('üå± –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    const master1 = await prisma.master.create({
      data: {
        name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞',
        description: '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º –º–∞–Ω–∏–∫—é—Ä–µ.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=AI',
        experience: 5,
        isActive: true,
      }
    });

    const master2 = await prisma.master.create({
      data: {
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –ø–µ–¥–∏–∫—é—Ä–∞',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –ø–µ–¥–∏–∫—é—Ä—É —Å 3-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=MP',
        experience: 3,
        isActive: true,
      }
    });

    const master3 = await prisma.master.create({
      data: {
        name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        specialization: '–ú–∞—Å—Ç–µ—Ä –±—Ä–æ–≤–µ–π',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—é –±—Ä–æ–≤–µ–π.',
        photoUrl: 'https://via.placeholder.com/300x300/ec4899/ffffff?text=ES',
        experience: 4,
        isActive: true,
      }
    });

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
    const service1 = await prisma.service.create({
      data: {
        name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        price: 1500,
        duration: 60,
        category: '–ú–∞–Ω–∏–∫—é—Ä',
        isActive: true,
      }
    });

    const service2 = await prisma.service.create({
      data: {
        name: '–ü–µ–¥–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π',
        description: '–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        price: 2000,
        duration: 90,
        category: '–ü–µ–¥–∏–∫—é—Ä',
        isActive: true,
      }
    });

    const service3 = await prisma.service.create({
      data: {
        name: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π',
        description: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä–º—ã –±—Ä–æ–≤–µ–π –≤–æ—Å–∫–æ–º',
        price: 800,
        duration: 30,
        category: '–ë—Ä–æ–≤–∏',
        isActive: true,
      }
    });

    const service4 = await prisma.service.create({
      data: {
        name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π',
        description: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π –∫—Ä–∞—Å–∫–æ–π',
        price: 1200,
        duration: 45,
        category: '–ë—Ä–æ–≤–∏',
        isActive: true,
      }
    });

    console.log('‚úÖ –£—Å–ª—É–≥–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–≤—è–∑—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ —Å —É—Å–ª—É–≥–∞–º–∏
    await prisma.masterService.createMany({
      data: [
        { masterId: master1.id, serviceId: service1.id },
        { masterId: master2.id, serviceId: service2.id },
        { masterId: master3.id, serviceId: service3.id },
        { master3.id, serviceId: service4.id },
      ]
    });

    console.log('‚úÖ –°–≤—è–∑–∏ –º–∞—Å—Ç–µ—Ä-—É—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    const scheduleData = [];
    for (let masterId of [master1.id, master2.id, master3.id]) {
      // –ü–Ω-–ü—Ç
      for (let dayOfWeek = 1; dayOfWeek <= 5; dayOfWeek++) {
        scheduleData.push({
          masterId: masterId,
          dayOfWeek: dayOfWeek,
          startTime: '09:00',
          endTime: '18:00',
          isWorking: true,
        });
      }
      // –°—É–±–±–æ—Ç–∞
      scheduleData.push({
        masterId: masterId,
        dayOfWeek: 6,
        startTime: '10:00',
        endTime: '16:00',
        isWorking: true,
      });
    }

    await prisma.masterSchedule.createMany({
      data: scheduleData
    });

    console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        telegramId: BigInt(123456789),
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'testuser',
        phone: '+7 (999) 123-45-67',
        isActive: true,
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(14, 0, 0, 0);

    await prisma.appointment.create({
      data: {
        userId: user.id,
        masterId: master1.id,
        serviceId: service1.id,
        appointmentDate: tomorrow,
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
        totalPrice: service1.price,
        status: 'PENDING',
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    await prisma.admin.create({
      data: {
        telegramId: BigInt(987654321),
        firstName: '–ê–¥–º–∏–Ω',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        username: 'admin',
        isActive: true,
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω');

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initDatabase()
  .then(() => {
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

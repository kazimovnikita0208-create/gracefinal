import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function viewDatabase() {
  try {
    console.log('\nüå∏ Grace Beauty Salon - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n');
    console.log('=' .repeat(50));

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const users = await prisma.user.findMany();
    console.log(`\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (${users.length}):`);
    users.forEach(user => {
      console.log(`  ‚Ä¢ ${user.firstName} ${user.lastName || ''} (ID: ${user.telegramId})`);
    });

    // –ú–∞—Å—Ç–µ—Ä–∞
    const masters = await prisma.master.findMany();
    console.log(`\nüë®‚Äçüíº –ú–ê–°–¢–ï–†–ê (${masters.length}):`);
    masters.forEach(master => {
      console.log(`  ‚Ä¢ ${master.name} - ${master.specialization}`);
      console.log(`    –û–ø—ã—Ç: ${master.experience || 0} –ª–µ—Ç, –†–µ–π—Ç–∏–Ω–≥: ‚≠ê ${master.rating}`);
      console.log(`    –°—Ç–∞—Ç—É—Å: ${master.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    });

    // –£—Å–ª—É–≥–∏
    const services = await prisma.service.findMany();
    console.log(`\nüíÖ –£–°–õ–£–ì–ò (${services.length}):`);
    services.forEach(service => {
      console.log(`  ‚Ä¢ ${service.name} - ${(service.price / 100).toFixed(0)}‚ÇΩ`);
      console.log(`    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${service.category}`);
      console.log(`    –°—Ç–∞—Ç—É—Å: ${service.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}`);
    });

    // –°–≤—è–∑–∏ –º–∞—Å—Ç–µ—Ä-—É—Å–ª—É–≥–∞
    const masterServices = await prisma.masterService.findMany({
      include: {
        master: true,
        service: true
      }
    });
    console.log(`\nüîó –°–í–Ø–ó–ò –ú–ê–°–¢–ï–†-–£–°–õ–£–ì–ê (${masterServices.length}):`);
    masterServices.forEach(ms => {
      console.log(`  ‚Ä¢ ${ms.master.name} ‚Üí ${ms.service.name} (${(ms.service.price / 100).toFixed(0)}‚ÇΩ)`);
    });

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const schedules = await prisma.masterSchedule.findMany({
      include: {
        master: true
      }
    });
    console.log(`\nüìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï (${schedules.length} –∑–∞–ø–∏—Å–µ–π):`);
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    schedules.forEach(schedule => {
      const dayName = days[schedule.dayOfWeek];
      console.log(`  ‚Ä¢ ${schedule.master.name}: ${dayName} ${schedule.startTime}-${schedule.endTime}`);
    });

    // –ó–∞–ø–∏—Å–∏
    const appointments = await prisma.appointment.findMany({
      include: {
        user: true,
        master: true,
        service: true
      }
    });
    console.log(`\nüìã –ó–ê–ü–ò–°–ò (${appointments.length}):`);
    if (appointments.length > 0) {
      appointments.forEach(appointment => {
        const date = new Date(appointment.appointmentDate).toLocaleDateString('ru-RU');
        console.log(`  ‚Ä¢ ${appointment.user.firstName} ‚Üí ${appointment.master.name} ‚Üí ${appointment.service.name}`);
        console.log(`    –î–∞—Ç–∞: ${date}, –°—Ç–∞—Ç—É—Å: ${appointment.status}, –¶–µ–Ω–∞: ${(appointment.totalPrice / 100).toFixed(0)}‚ÇΩ`);
      });
    } else {
      console.log('  üìù –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç');
    }

    // –ê–¥–º–∏–Ω—ã
    const admins = await prisma.admin.findMany();
    console.log(`\nüë§ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ (${admins.length}):`);
    admins.forEach(admin => {
      console.log(`  ‚Ä¢ ${admin.name} (${admin.role}) - Telegram ID: ${admin.telegramId}`);
      console.log(`    –°—Ç–∞—Ç—É—Å: ${admin.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await prisma.notification.findMany();
    console.log(`\nüîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (${notifications.length}):`);
    if (notifications.length > 0) {
      notifications.forEach(notification => {
        console.log(`  ‚Ä¢ ${notification.title}: ${notification.message}`);
        console.log(`    –¢–∏–ø: ${notification.type}, –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${notification.isRead ? '‚úÖ' : '‚ùå'}`);
      });
    } else {
      console.log('  üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç');
    }

    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüí° –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run db:web');
    console.log('üí° –î–ª—è Prisma Studio –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run db:studio');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

viewDatabase();




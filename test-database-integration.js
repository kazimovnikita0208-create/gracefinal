// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const http = require('http');

function testDatabaseIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
  console.log('=' .repeat(50));

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –º–∞—Å—Ç–µ—Ä–æ–≤
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –º–∞—Å—Ç–µ—Ä–æ–≤...');
  const mastersOptions = {
    hostname: 'localhost',
    port: 3002,
    path: '/api/masters',
    method: 'GET'
  };

  const mastersReq = http.request(mastersOptions, (res) => {
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
    
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        if (response.success && response.data) {
          console.log(`üìä –ú–∞—Å—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: ${response.data.length}`);
          console.log(`üë®‚Äçüíº –ü–µ—Ä–≤—ã–π –º–∞—Å—Ç–µ—Ä: ${response.data[0]?.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
          console.log(`‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${response.data[0]?.rating || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API');
        }
      } catch (err) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err.message);
      }
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º API —É—Å–ª—É–≥
      console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —É—Å–ª—É–≥...');
      const servicesOptions = {
        hostname: 'localhost',
        port: 3002,
        path: '/api/services',
        method: 'GET'
      };

      const servicesReq = http.request(servicesOptions, (res) => {
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
        
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          try {
            const response = JSON.parse(data);
            if (response.success && response.data) {
              console.log(`üìä –£—Å–ª—É–≥ –≤ –±–∞–∑–µ: ${response.data.length}`);
              console.log(`üíÖ –ü–µ—Ä–≤–∞—è —É—Å–ª—É–≥–∞: ${response.data[0]?.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
              console.log(`üí∞ –¶–µ–Ω–∞: ${response.data[0]?.price ? (response.data[0].price / 100) + '‚ÇΩ' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
            } else {
              console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API');
            }
          } catch (err) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err.message);
          }
          
          console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
          console.log('=' .repeat(50));
          console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç');
          console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        });
      });

      servicesReq.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ API —É—Å–ª—É–≥:', err.message);
      });

      servicesReq.end();
    });
  });

  mastersReq.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –º–∞—Å—Ç–µ—Ä–æ–≤:', err.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω: npm run dev (–≤ –ø–∞–ø–∫–µ backend)');
  });

  mastersReq.end();
}

testDatabaseIntegration();



